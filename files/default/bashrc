# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

export PATH=$PATH:/usr/local/rvm/bin # Add RVM to PATH for scripting

if [ -f /usr/local/rvm/bin/rvm ]; then
  rvm use 2.1.2
fi

# Add commonly used knife aliases
alias kcu='knife cookbook upload'
alias krff='knife role from file'
alias kdbff='knife data bag from file'
alias kcd='knife client delete'
alias knd='knife node delete'
alias kne='knife node edit'
alias ks='knife search'
alias kns='knife node show'
alias keff='knife environment from file'
alias kes='knife environment show'

alias vi='vim'
alias em='emacs'

alias bev='bundle exec vagabond'

alias li='librarian-chef install'
alias lu='librarian-chef update'

export rvmsudo_secure_path=1

if [ -f /etc/chef/opscode_user ]; then
  export OPSCODE_USER=`cat /etc/chef/opscode_user`
fi

function gpa {
  for remote in $(git remote -v | grep push | cut -f 1 -); do
    echo "-----> Pushing to $remote: $*"
    git push $remote $*
  done
}

function vfd {
  echo "Full vagrant and chef destroy of ${1}"
  vagrant destroy -f $1
  knife node delete -y $1.chrisroberts
  knife client delete -y $1.chrisroberts
}

if [ ! -f ~/.ssh-agent-info ]; then
  ssh-agent > ~/.ssh-agent-info
  source ~/.ssh-agent-info
  ssh-add ~/.ssh/id_rsa.work
else
  source ~/.ssh-agent-info
fi

function ws_crypt {
    echo -e -n "${echo_bold_white}Data bag item encryption:${echo_reset_color} "
    if [[ $CHEF_ENCRYPTED = 'ON' ]]
    then
        sed -i "s/export CHEF_ENCRYPTED=.*/export CHEF_ENCRYPTED=OFF/" $(direnv_rc)
        echo -e -n "${echo_red}disabled"
    else
        sed -i "s/export CHEF_ENCRYPTED=.*/export CHEF_ENCRYPTED=ON/" $(direnv_rc)
        echo -e -n "${echo_green}enabled"
    fi
    echo -e "${echo_reset_color}"
    direnv_fload
}

function ws_acct {
    ACCT=${1:sandbox}
    echo -e "${echo_bold_white}Account change to:${echo_reset_color} ${echo_purple}${ACCT}${echo_reset_color}"
    sed -i "s/export PROVIDER_ACCOUNT=.*/export PROVIDER_ACCOUNT=${ACCT}/" $(direnv_rc)
    direnv_fload
}

function ws_region {
    REGION=${1:ord}
    echo -e "${echo_bold_white}Region change to:${echo_reset_color} ${echo_purple}${REGION}${echo_reset_color}"
    sed -i "s/export PROVIDER_REGION=.*/export PROVIDER_REGION=${REGION}/" $(direnv_rc)
    direnv_fload
}

function direnv_rc {
    direnv status | grep "Found RC path" | cut -d ' ' -f 4
}

function direnv_fload {
    direnv allow
    direnv reload
}

function current_acct {
    echo $PROVIDER_ACCOUNT
}

function current_region {
    echo $PROVIDER_REGION
}

export MUXER_HOST="croberts@muxer.hw-ops.com"

function workspace_current_acct {
    if [[ $PROVIDER_ACCOUNT != '' ]]
    then
        echo -e "[${yellow}$(current_acct)${orange}:${yellow}$(current_region)${orange}] "
    fi
}

function workspace_encrypted_dbi {
    if [[ $CHEF_ENCRYPTED != '' ]]
    then
        if [[ $CHEF_ENCRYPTED = 'ON' ]]
        then
            echo -e "${red}{x} "
        else
            echo -e "${cyan}{-} "
        fi
    fi
}

function direnv-init {
    if [ -f .envrc ]
    then
        echo -e "${echo_bold_red}ERROR:${echo_reset_color} Will not overwrite existing file!"
    else
        echo "export PROVIDER_ACCOUNT=\"\"" > .envrc
        echo "export PROVIDER_REGION=\"\"" >> .envrc
        echo "export CHEF_ENCRYPTED=\"\"" >> .envrc
        echo "Initialized direnv!"
        direnv allow
    fi
}

eval "$(direnv hook bash)"

function custom_prompt_command {
    PS1="\n${yellow}$(ruby_version_prompt) ${purple}\h ${reset_color}in ${green}\w\n${bold_cyan}$(scm_char)${green}$(scm_prompt_info) ${orange}$(workspace_current_acct)${red}$(workspace_encrypted_dbi)${green}â†’${reset_color} "
}

PROMPT_COMMAND="_direnv_hook;custom_prompt_command";